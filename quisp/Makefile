#
# OMNeT++/OMNEST Makefile for quisp
#
# This file was generated with the command:
#  opp_makemake -f --deep -O out -I"D:/University/Graduate/Quisp/eigen3" -I.
#

# Name of target to be created (-o option)
TARGET = quisp$(D)$(EXE_SUFFIX)
TARGET_DIR = .

# User interface (uncomment one) (-u option)
USERIF_LIBS = $(ALL_ENV_LIBS) # that is, $(TKENV_LIBS) $(QTENV_LIBS) $(CMDENV_LIBS)
#USERIF_LIBS = $(CMDENV_LIBS)
#USERIF_LIBS = $(TKENV_LIBS)
#USERIF_LIBS = $(QTENV_LIBS)

# C++ include paths (with -I)
INCLUDE_PATH = -I"D:/University/Graduate/Quisp/eigen3" -I.

# Additional object and library files to link with
EXTRA_OBJS =

# Additional libraries (-L, -l options)
LIBS =

# Output directory
PROJECT_OUTPUT_DIR = out
PROJECTRELATIVE_PATH =
O = $(PROJECT_OUTPUT_DIR)/$(CONFIGNAME)/$(PROJECTRELATIVE_PATH)

# Object files for local .cc, .msg and .sm files
OBJS = \
    $O/unit_test_main.o \
    $O/channels/QuantumChannel.o \
    $O/modules/dummyModule.o \
    $O/modules/Application/Application.o \
    $O/modules/Common/Queue.o \
    $O/modules/Common/Router.o \
    $O/modules/PhysicalConnection/BSA/ABSA.o \
    $O/modules/PhysicalConnection/BSA/ABSA_controller.o \
    $O/modules/PhysicalConnection/BSA/BellStateAnalyzer.o \
    $O/modules/PhysicalConnection/BSA/HoMController.o \
    $O/modules/PhysicalConnection/EPPS/EntangledPhotonPairSource.o \
    $O/modules/PhysicalConnection/EPPS/SPDC_Controller.o \
    $O/modules/QNIC/PhotonicSwitch/PhotonicSwitch.o \
    $O/modules/QNIC/StationaryQubit/StationaryQubit.o \
    $O/modules/QRSA/ConnectionManager/ConnectionManager.o \
    $O/modules/QRSA/HardwareMonitor/HardwareMonitor.o \
    $O/modules/QRSA/RealTimeController/RealTimeController.o \
    $O/modules/QRSA/RealTimeController/RealTimeController_test.o \
    $O/modules/QRSA/RoutingDaemon/RoutingDaemon.o \
    $O/modules/QRSA/RoutingDaemon/RoutingDaemon_test.o \
    $O/modules/QRSA/RuleEngine/RuleEngine.o \
    $O/rules/Action.o \
    $O/rules/Clause.o \
    $O/rules/Condition.o \
    $O/rules/example.o \
    $O/rules/Rule.o \
    $O/rules/RuleSet.o \
    $O/classical_messages_m.o \
    $O/PhotonicQubit_m.o

# Message files
MSGFILES = \
    classical_messages.msg \
    PhotonicQubit.msg

# SM files
SMFILES =

#------------------------------------------------------------------------------

# Pull in OMNeT++ configuration (Makefile.inc)

ifneq ("$(OMNETPP_CONFIGFILE)","")
CONFIGFILE = $(OMNETPP_CONFIGFILE)
else
ifneq ("$(OMNETPP_ROOT)","")
CONFIGFILE = $(OMNETPP_ROOT)/Makefile.inc
else
CONFIGFILE = $(shell opp_configfilepath)
endif
endif

ifeq ("$(wildcard $(CONFIGFILE))","")
$(error Config file '$(CONFIGFILE)' does not exist -- add the OMNeT++ bin directory to the path so that opp_configfilepath can be found, or set the OMNETPP_CONFIGFILE variable to point to Makefile.inc)
endif

include $(CONFIGFILE)

# Simulation kernel and user interface libraries
OMNETPP_LIBS = $(OPPMAIN_LIB) $(USERIF_LIBS) $(KERNEL_LIBS) $(SYS_LIBS)

COPTS = $(CFLAGS) $(IMPORT_DEFINES)  $(INCLUDE_PATH) -I$(OMNETPP_INCL_DIR)
MSGCOPTS = $(INCLUDE_PATH)
SMCOPTS =

# we want to recompile everything if COPTS changes,
# so we store COPTS into $COPTS_FILE and have object
# files depend on it (except when "make depend" was called)
COPTS_FILE = $O/.last-copts
ifneq ("$(COPTS)","$(shell cat $(COPTS_FILE) 2>/dev/null || echo '')")
$(shell $(MKPATH) "$O" && echo "$(COPTS)" >$(COPTS_FILE))
endif

#------------------------------------------------------------------------------
# User-supplied makefile fragment(s)
# >>>
# inserted from file 'makefrag':
CXXFLAGS = -std=c++14

OBJS := $(filter-out %_test.o,$(OBJS))
OBJS := $(filter-out %unit_test_main.o,$(OBJS))

# you can pass the file path you want to check as SRCS environment variable. see the example below.
# $ SRCS=./quisp/modules/Application.cc make tidy # checks only Application.cc
# $ make tidy # checks all sources
SRCS?=$(shell find . -type f -name "*.cc" -print)
HEADERS=$(shell find . -type f -name "*.h" -print)
TEST_SRCS=$(filter %_test.cc,$(SRCS))
TEST_OBJS=$(TEST_SRCS:.cc=.o)
TEST_INCLUDE=-I../googletest/googletest/include/
TEST_LIBS=-L../googletest/build/lib -lgtest
TEST_MAIN_SRC=unit_test_main.cc
TEST_MAIN_OBJ=$(O)/unit_test_main.o

# check eigen3 is in PKG_CONFIG_PATH
PKG_CONFIG_STATUS=$(shell pkg-config eigen3 --cflags 2>/dev/null 1>&2; echo $$?)
ifneq ('0','$(PKG_CONFIG_STATUS)')
$(warning 'eigen3 is not found in pkg-config. check you PKG_CONFIG_PATH')
$(warning 'your PKG_CONFIG_PATH is $(PKG_CONFIG_PATH)')
endif

INCLUDE_PATH+=-I. $(shell pkg-config eigen3 --cflags)

default: all

format:
	clang-format -i $(SRCS) $(HEADERS)

tidy:
	clang-tidy -header-filter="./quisp/(rules|modules)/.*.h" $(SRCS) -- $(COPTS:-I.=-I./quisp)

ci: msgheaders
	@clang-format $(SRCS) $(HEADERS) -output-replacements-xml | grep -c "<replacement " -q ; if [ $$? -ne 1 ]; then echo "error: run make format and then push it again"; exit 1; fi
	@clang-tidy -warnings-as-errors="*" -header-filter="./(rules|modules)/.*.h" $(SRCS) -- $(COPTS:-I.=-I./quisp)

$(O)/$(TEST_OBJS): $(TEST_SRCS)
	@$(MKPATH) $(dir $@)
	$(qecho) "$<"
	$(Q)$(CXX) -c $(CXXFLAGS) $(COPTS) $(TEST_INCLUDE) -o $@ $<

$(O)/$(TEST_MAIN_OBJ): $(TEST_MAIN_SRC)
	@$(MKPATH) $(dir $@)
	$(Q)$(CXX) -c $(TEST_INCLUDE) -o $@ $< $(CXXFLAGS)

$(TARGET_DIR)/run_unit_test: $(O)/$(TEST_OBJS)  $(wildcard $(EXTRA_OBJS)) Makefile $(CONFIGFILE) $(O)/$(TEST_MAIN_OBJ)
	@$(MKPATH) $O
	@echo Creating test executable:
	$(Q)$(CXX) $(LDFLAGS) -lpthread -o $(TARGET_DIR)/run_unit_test $(O)/$(TEST_OBJS) $(OBJS) $(O)/$(TEST_MAIN_OBJ) $(EXTRA_OBJS) $(LIBS) $(TEST_LIBS) $(OMNETPP_LIBS)

run-unit-test: $(TARGET_DIR)/run_unit_test
	$(TARGET_DIR)/run_unit_test

# <<<
#------------------------------------------------------------------------------

# Main target
all: $(TARGET_DIR)/$(TARGET)

$(TARGET_DIR)/% :: $O/%
	@mkdir -p $(TARGET_DIR)
	$(Q)$(LN) $< $@
ifeq ($(TOOLCHAIN_NAME),clangc2)
	$(Q)-$(LN) $(<:%.dll=%.lib) $(@:%.dll=%.lib)
endif

$O/$(TARGET): $(OBJS)  $(wildcard $(EXTRA_OBJS)) Makefile $(CONFIGFILE)
	@$(MKPATH) $O
	@echo Creating executable: $@
	$(Q)$(CXX) $(LDFLAGS) -o $O/$(TARGET) $(OBJS) $(EXTRA_OBJS) $(AS_NEEDED_OFF) $(WHOLE_ARCHIVE_ON) $(LIBS) $(WHOLE_ARCHIVE_OFF) $(OMNETPP_LIBS)

.PHONY: all clean cleanall depend msgheaders smheaders

.SUFFIXES: .cc

$O/%.o: %.cc $(COPTS_FILE) | msgheaders smheaders
	@$(MKPATH) $(dir $@)
	$(qecho) "$<"
	$(Q)$(CXX) -c $(CXXFLAGS) $(COPTS) -o $@ $<

%_m.cc %_m.h: %.msg
	$(qecho) MSGC: $<
	$(Q)$(MSGC) -s _m.cc -MD -MP -MF $O/$(basename $<)_m.h.d $(MSGCOPTS) $?

%_sm.cc %_sm.h: %.sm
	$(qecho) SMC: $<
	$(Q)$(SMC) -c++ -suffix cc $(SMCOPTS) $?

msgheaders: $(MSGFILES:.msg=_m.h)

smheaders: $(SMFILES:.sm=_sm.h)

clean:
	$(qecho) Cleaning $(TARGET)
	$(Q)-rm -rf $O
	$(Q)-rm -f $(TARGET_DIR)/$(TARGET)
	$(Q)-rm -f $(TARGET_DIR)/$(TARGET:%.dll=%.lib)
	$(Q)-rm -f $(call opp_rwildcard, . , *_m.cc *_m.h *_sm.cc *_sm.h)

cleanall:
	$(Q)$(MAKE) -s clean MODE=release
	$(Q)$(MAKE) -s clean MODE=debug
	$(Q)-rm -rf $(PROJECT_OUTPUT_DIR)

# include all dependencies
-include $(OBJS:%=%.d) $(MSGFILES:%.msg=$O/%_m.h.d)
