CXXFLAGS = -std=c++17

OBJS := $(filter-out test_util/% %_test.o,$(OBJS))
OBJS := $(filter-out %unit_test_main.o,$(OBJS))
MSGC:=$(MSGC) --msg6

# you can pass the file path you want to check as SRCS environment variable. see the example below.
# $ SRCS=./quisp/modules/Application.cc make tidy # checks only Application.cc
# $ make tidy # checks all sources
SRCS?=$(shell git ls-files . | grep "^.*.cc$$")
HEADERS?=$(shell git ls-files . | grep "^.*.h$$")
PROJ_ROOT=$(shell git rev-parse --show-toplevel)
TEST_SRCS=$(filter %_test.cc,$(SRCS)) $(test_utils/%.cc) ./unit_test_main.cc
TEST_OBJS=$(foreach obj,$(TEST_SRCS:.cc=.o),$O/$(obj))
TEST_INCLUDE=-I$(PROJ_ROOT)/googletest/googletest/include/ -I$(PROJ_ROOT)/googletest/googlemock/include/
TEST_LIBS=-L$(PROJ_ROOT)/googletest/build/lib -lgtest -lgmock
NPROC?=$(shell nproc)

ifneq (,$(ENABLE_COVERAGE))
CXXFLAGS+=-ftest-coverage -fprofile-instr-generate -fcoverage-mapping
LDFLAGS+=-ftest-coverage -fprofile-instr-generate -fcoverage-mapping
endif

# include path for external libs
INCLUDE_PATH+=-I. -I$(PROJ_ROOT)/eigen/ -I$(PROJ_ROOT)/json/include/ -I$(PROJ_ROOT)/spdlog/include/

default: eigen all

format:
	clang-format -i $(SRCS) $(HEADERS)

format-ci:
	clang-format $(SRCS) $(HEADERS) -output-replacements-xml | grep -c "<replacement " -q ; if [ $$? -ne 1 ]; then echo "error: run make format and then push it again"; exit 1; fi

tidy:
	clang-tidy -header-filter="./quisp/(.|backends|utils|rules|runtime|modules|test_utils)/.*.h" $(SRCS) -- $(COPTS) $(CXXFLAGS) $(TEST_INCLUDE)

$(TEST_OBJS): $O/%.o : %.cc
	@$(MKPATH) $(dir $@)
	$(qecho) "$<"
	$(Q)$(CXX) -c $(CXXFLAGS) $(COPTS) $(TEST_INCLUDE) -o $@ $<

$(TARGET_DIR)/run_unit_test: $(TARGET_DIR)/$(TARGET) $(TEST_OBJS)  $(wildcard $(EXTRA_OBJS)) Makefile $(CONFIGFILE)
	MODE=debug
	@$(MKPATH) $O
	@echo Creating test executable:
	$(Q)$(CXX) $(LDFLAGS) -lpthread -o $(TARGET_DIR)/run_unit_test $(TEST_OBJS) $(OBJS) $(EXTRA_OBJS) $(LIBS) $(TEST_LIBS) $(OMNETPP_LIBS)

run-unit-test: $(TARGET_DIR)/run_unit_test
	$(TARGET_DIR)/run_unit_test

$(TARGET_DIR)/coverage.profraw:
	rm -rf coverage*
	ENABLE_COVERAGE=true make run-unit-test -j$(NPROC)
	LLVM_PROFILE_FILE=$(TARGET_DIR)/coverage.profraw $(TARGET_DIR)/run_unit_test

$(TARGET_DIR)/coverage.profdata: $(TARGET_DIR)/coverage.profraw
	llvm-profdata merge -sparse -o $(TARGET_DIR)/coverage.profdata $(TARGET_DIR)/coverage.profraw

$(TARGET_DIR)/lcov.info: $(TARGET_DIR)/coverage.profdata
	llvm-cov export -instr-profile=./coverage.profdata ./run_unit_test -format=lcov ../ -ignore-filename-regex=".*_test.cc|.*_test_main.cc|googletest/.*|json/.*|eigen/.*|.*test_utils/.*|spdlog/|.*_m.h|.*_m.cc" > lcov.info

$(TARGET_DIR)/coverage/index.html: $(TARGET_DIR)/lcov.info
	genhtml lcov.info -o $(TARGET_DIR)/coverage

.PHONY: eigen
# check eigen exists and setup eigen if needed.
eigen:
	make eigen -C $(PROJ_ROOT)

all: eigen
