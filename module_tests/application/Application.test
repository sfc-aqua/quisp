%description:
Application module should send back the ConnectionSetupReq and InternalRuleSetForwarding to the router

%file: package.ned
package Application;
@namespace(Application);

%file: test.ned
package Application;

import ned.DatarateChannel;
import modules.Application.Application;
import modules.QNode;

simple MockRouter {
    gates:
        input fromApp;
        output toApp;
}
simple TestApplication extends Application {
    @class(TestApplication);
}
module MockQNode {

    parameters:
        // Application needs the parent node's address
        string address;
        string node_type;
        bool is_initiator;
        int mass;

    submodules:
        router: MockRouter;

        app: TestApplication {
        }
    connections:
        router.fromApp <-- app.toRouter;
        router.toApp --> app.fromRouter;
}

network ApplicationTestNet
{
    submodules:
        mockQNode: MockQNode {
            address = "0.1";
            node_type = "none";
            is_initiator = false;
            mass = 100;
        }
}

%inifile: omnetpp.ini

[General]
network = ApplicationTestNet
**.qrsa.hm.link_tomography = false
**.qrsa.hm.initial_purification = 0
**.qrsa.hm.purification_type = 0
**.app.number_of_bellpair = 10

%includes:
#include <messages/classical_messages.h>

%file: mock_router.cc
#include <omnetpp.h>
#include <messages/classical_messages.h>
#include <modules/Application/Application.h>
#include <test_utils/TestUtils.h>
using namespace omnetpp;
using namespace quisp::messages;
namespace Application {
class Strategy : public quisp_test::TestComponentProviderStrategy {
    public:
    Strategy(cModule *_self): self(_self){}
    cModule* getQNode() override {return self->getParentModule(); }
    cModule *self;
};

class TestApplication: public quisp::modules::Application {
    public:
    TestApplication(): quisp::modules::Application() {
        provider.setStrategy(std::make_unique<Strategy>(this));
    }
};
Define_Module(TestApplication);
class MockRouter: public cSimpleModule
{
    public:
        QNodeAddr my_address{1};
        QNodeAddr dest_addr{2};
        MockRouter() : cSimpleModule(65536) {}
        virtual void initialize() {
            sendConnectionSetupRequest();
            sendInternalRuleSetForwarding();
        }
        void sendConnectionSetupRequest() {
            auto *p = new ConnectionSetupRequest();
            p->setActual_srcAddr(my_address);
            p->setActual_destAddr(dest_addr);
            p->setDestAddr(my_address);
            p->setSrcAddr(my_address);
            p->setNumber_of_required_Bellpairs(3);
            p->setKind(7);
            send(p, "toApp");
        }
        void sendInternalRuleSetForwarding() {
            auto *p = new InternalRuleSetForwarding();
            send(p, "toApp");
        }
        virtual void activity(){
            while(true) {
                auto msg = receive();
                EV_INFO << "RECEIVE MESSAGE: " << msg << std::endl;
                delete msg;
            }
        }
};
Define_Module(MockRouter);
}; //namespace

%contains: test.out
RECEIVE MESSAGE: (quisp::messages::ConnectionSetupRequest)
%contains: test.out
RECEIVE MESSAGE: (quisp::messages::InternalRuleSetForwarding)
