%description:

In this test, packets are produced periodically by an active packet source
(ActivePacketSource). The packets are consumed by two passive packet sinks
(PassivePacketSinks). The single source is connected to the two sinks using a
classifier (LabelClassifier). The classifier forwards packets alternately to
one or the other sink based on the packet's label. The label is attached by
a PacketLabeler based on the packet length.

%file: test.ned

import inet.queueing.sink.PassivePacketSink;
import inet.queueing.marker.PacketLabeler;
import inet.queueing.classifier.LabelClassifier;
import inet.queueing.source.ActivePacketSource;

network TestLabeler
{
    submodules:
        producer: ActivePacketSource {
            @display("p=100,100");
        }
        marker: PacketLabeler {
            @display("p=200,100");
        }
        classifier: LabelClassifier {
            @display("p=300,100");
        }
        consumer1: PassivePacketSink {
            @display("p=400,100");
        }
        consumer2: PassivePacketSink {
            @display("p=400,200");
        }
    connections allowunconnected:
        producer.out --> marker.in;
        marker.out --> classifier.in;
        classifier.out++ --> consumer1.in;
        classifier.out++ --> consumer2.in;
}

%file: Test.cc
#include "inet/queueing/function/PacketFilterFunction.h"
#include "inet/common/packet/Packet.h"

using namespace inet; 

static bool testSmall(Packet *packet)
{
    return packet->getTotalLength() == B(1);
}

Register_Packet_Filter_Function(TestSmall, testSmall);

static bool testLarge(Packet *packet)
{
    return packet->getTotalLength() == B(2);
}

Register_Packet_Filter_Function(TestLarge, testLarge);

%inifile: omnetpp.ini

[General]
network = TestLabeler
sim-time-limit = 10s
cmdenv-event-banners = false
*.producer.packetLength = intuniform(1B, 2B)
*.producer.productionInterval = 1s
*.marker.filterClasses = "TestSmall TestLarge"
*.marker.labels = "small large"
*.classifier.labelsToGateIndices = "small 0 large 1"

%contains: stdout
Producing packet producer-0.
Marking packet producer-0.
Marking packet producer-0 with small.
Classifying packet producer-0.
Consuming packet producer-0.

Running simulation...
Producing packet producer-1.
Marking packet producer-1.
Marking packet producer-1 with large.
Classifying packet producer-1.
Consuming packet producer-1.
Producing packet producer-2.
Marking packet producer-2.
Marking packet producer-2 with large.
Classifying packet producer-2.
Consuming packet producer-2.
Producing packet producer-3.
Marking packet producer-3.
Marking packet producer-3 with small.
Classifying packet producer-3.
Consuming packet producer-3.
Producing packet producer-4.
Marking packet producer-4.
Marking packet producer-4 with large.
Classifying packet producer-4.
Consuming packet producer-4.
Producing packet producer-5.
Marking packet producer-5.
Marking packet producer-5 with large.
Classifying packet producer-5.
Consuming packet producer-5.
Producing packet producer-6.
Marking packet producer-6.
Marking packet producer-6 with large.
Classifying packet producer-6.
Consuming packet producer-6.
Producing packet producer-7.
Marking packet producer-7.
Marking packet producer-7 with large.
Classifying packet producer-7.
Consuming packet producer-7.
Producing packet producer-8.
Marking packet producer-8.
Marking packet producer-8 with large.
Classifying packet producer-8.
Consuming packet producer-8.
Producing packet producer-9.
Marking packet producer-9.
Marking packet producer-9 with large.
Classifying packet producer-9.
Consuming packet producer-9.
Producing packet producer-10.
Marking packet producer-10.
Marking packet producer-10 with large.
Classifying packet producer-10.
Consuming packet producer-10.
