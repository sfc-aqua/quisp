[Config inet_inet]
description = "inet_TCP <---> inet_TCP"
# setting TCP stack implementation
**.server*.tcp.typename = "Tcp"
**.client*.tcp.typename = "Tcp"

[Config nsc_nsc]
description = "NSC_TCP <---> NSC_TCP"
# setting TCP stack implementation
**.tcp.typename = "TcpNsc"

[Config nsc_inet]
description = "NSC_TCP <---> inet_TCP"
# setting TCP stack implementation
**.server*.tcp.typename = "TcpNsc"
**.client*.tcp.typename = "Tcp"

[Config inet_nsc]
description = "inet_TCP <---> NSC_TCP"
# setting TCP stack implementation
**.server*.tcp.typename = "Tcp"
**.client*.tcp.typename = "TcpNsc"

[Config lwip__lwip]
description = "TcpLwip <---> TcpLwip"
# setting TCP stack implementation
**.server*.tcp.typename = "TcpLwip"
**.client*.tcp.typename = "TcpLwip"

[Config lwip__inet]
description = "TcpLwip <---> inet_TCP"
# setting TCP stack implementation
**.server*.tcp.typename = "TcpLwip"
**.client*.tcp.typename = "Tcp"

[Config inet__lwip]
description = "inet_TCP <---> TcpLwip"
# setting TCP stack implementation
**.server*.tcp.typename = "Tcp"
**.client*.tcp.typename = "TcpLwip"


[General]
network = BulkTransfer6
total-stack = 7MiB
sim-time-limit = 50day

# configurator
*.configurator.useTentativeAddrs = false # FIXME TBD to be switched to true, for testing DAD!

# tcp apps
**.client*.numApps = 1
**.client*.app[*].typename = "TcpSessionApp"
**.client*.app[0].active = true
**.client*.app[0].localAddress = ""
**.client*.app[0].localPort = -1
**.client*.app[0].connectAddress = "server"
**.client*.app[0].connectPort = 1000
**.client*.app[0].tOpen = 5s
**.client*.app[0].tSend = 7s
**.client*.app[0].sendBytes = 1000000B
**.client*.app[0].sendScript = ""
**.client*.app[0].tClose = 0s

**.server.numApps = 1
**.server.app[*].typename = "TcpEchoApp"
**.server.app[0].localAddress = ""
**.server.app[0].localPort = 1000
**.server.app[0].echoFactor = 2.0
**.server.app[0].echoDelay = 0s

# NIC configuration
**.ppp[*].ppp.queue.typename = "DropTailQueue" # in routers
**.ppp[*].ppp.queue.packetCapacity = 10  # in routers

**.eth[*].mac.queue.typename = "EtherQosQueue"
**.eth[*].mac.queue.dataQueue.typename = "DropTailQueue" # in routers
**.eth[*].mac.queue.dataQueue.packetCapacity = 10  # in routers
**.eth[*].mac.txrate = 10Mbps
**.eth[*].mac.duplexMode = true

**.*.tcp*.advertisedWindow = 65535

**.router.hasTcp = false
**.router.hasUdp = false

