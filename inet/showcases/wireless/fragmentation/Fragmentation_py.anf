<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<analysis version="2">
    <inputs>
        <input pattern="/inet/showcases/wireless/fragmentation/results/DCFnofrag*.*"/>
        <input pattern="/inet/showcases/wireless/fragmentation/results/DCFfrag-#*.*"/>
        <input pattern="/inet/showcases/wireless/fragmentation/results/HCFfrag-#*.*"/>
        <input pattern="/inet/showcases/wireless/fragmentation/results/HCFfragblockack-#*.*"/>
        <input pattern="/inet/showcases/wireless/fragmentation/results/OnlyPacketSize*.vec"/>
        <input pattern="/inet/showcases/wireless/fragmentation/results/OnlyPacketSize*.sca"/>
        <input pattern="/inet/showcases/wireless/fragmentation/results/Threshold*.vec"/>
        <input pattern="/inet/showcases/wireless/fragmentation/results/Threshold*.sca"/>
        <input pattern="/inet/showcases/wireless/fragmentation/results/PacketSize*.vec"/>
        <input pattern="/inet/showcases/wireless/fragmentation/results/PacketSize*.sca"/>
        <input pattern="/inet/showcases/wireless/fragmentation/results/TxPower*.vec"/>
        <input pattern="/inet/showcases/wireless/fragmentation/results/TxPower*.sca"/>
    </inputs>
    <charts>
        <chart icon="icons/full/obj/barchart.png" id="90" name="Number of packets received" template="barchart_mpl" type="MATPLOTLIB">
            <script>
                <![CDATA[# IDE version   OMNeT++ IDE    6.0.0.190710-009aaf6ab8

from omnetpp.scave import results, chart
import matplotlib.pyplot as plt
import pandas as pd

params = chart.get_properties()

# This expression selects the results (you might be able to logically simplify it)
filter_expression = params["filter"]

# The data is returned as a Pandas DataFrame
df = results.get_scalars(filter_expression, include_attrs=True, include_runattrs=True, include_itervars=True)

# You can perform any transformations on the data here

print(df)

title, legend = chart.extract_label_columns(df)

for i, c in legend:
    df[c] = pd.to_numeric(df[c], errors="ignore")

df.sort_values(by=[l for i, l in legend], axis='index', inplace=True)

plt.title(chart.make_chart_title(df, title, legend))

if len(legend) == 2:
    df = pd.pivot_table(df, index=legend[0][1], columns=legend[1][1], values='value')
else:
    df = pd.pivot_table(df, index=[l for i, l in legend], values='value')

print(df)

df = df.reindex(['DCFnofrag','DCFfrag','HCFfrag','HCFfragblockack'])

if False:
    df = df.transpose()

df.plot(kind='bar', ax=plt.gca(), zorder=2, align='center', width=0.8, figsize=(10,6))

ax = plt.gca()

plt.legend().remove()
plt.grid(axis='y', linestyle='--')
plt.title('Number of packets received, 2000-byte packets and 250-byte fragmentation threshold')
plt.xlabel('')
plt.xticks(rotation=0)

i = 0
for p in ax.patches:
    if(i):
        ax.annotate(str(int(p.get_height())), (p.get_x() + p.get_width() / 2, p.get_height() - 100),
                    horizontalalignment='center', verticalalignment='top', color='white', size=12)
    else:
        ax.annotate(str(int(p.get_height())), (p.get_x() + p.get_width() / 2, p.get_height() + 200),
                    horizontalalignment='center', verticalalignment='top', color='black', size=12)
    i += 1
    
plt.savefig('numberofpackets.png', transparent=True, dpi=150, bbox_inches='tight')
]]>
            </script>
            <dialogPage id="Main" label="Main">
                <![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- page generated from the following spec:
Names {
	chartName,
},
Options {
	Use antialias?,
	Use caching?,
},
Colors {
	backgroundColor
}    
    -->
    
    <!-- Names { -->
    <group text="Names">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- chartName -->
    <label text="Chart name:"/>
    <text x:id="chart_name" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!--  -->

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Background color:"/>
    <ColorChooser x:id="background_color" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]>
            </dialogPage>
            <dialogPage id="Input" label="Input">
                <![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <label text="Filter expression:"/>
    <text x:id="filter" x:style="BORDER|MULTI" x:id.isFilter="true"> 
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true" verticalAlignment="FILL" grabExcessVerticalSpace="true"/>
    </text>
  </x:children>
</xswt>]]>
            </dialogPage>
            <property name="filter" value="name(packetReceived:count) AND (runattr:experiment(DCFfrag) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(packetReceived:count) &#10;runattr:experiment(DCFnofrag) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(packetReceived:count) &#10;runattr:experiment(HCFfrag) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(packetReceived:count) &#10;runattr:experiment(HCFfragblockack) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(packetReceived:count) &#10;)"/>
            <property name="background_color" value=""/>
        </chart>
        <chart icon="icons/full/obj/linechart.png" id="68" name="Throughput" template="linechart_mpl" type="MATPLOTLIB">
            <script>
                <![CDATA[# IDE version   OMNeT++ IDE    6.0.0.190710-009aaf6ab8

from omnetpp.scave import results, chart, vectorops as ops
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

params = chart.get_properties()

# This expression selects the results (you might be able to logically simplify it)

filter_expression = params["filter"]

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression, include_attrs=True, include_itervars=True, include_runattrs=True)

df = ops.perform_vector_ops(df, params["vector_operations"])

# You can perform any transformations on the data here
df.vecvalue /= 1000000

print(df)

newcolors = ['#2ca02c', '#ff7f0e', '#1f77b4', '#d62728']
# green orange blue red

array_of_colors = np.array([['DCFfrag','#d62728',1], ['DCFnofrag','#2ca02c',0], ['HCFfrag','#1f77b4',2], ['HCFfragblockack','#ff7f0e',3]])
print(array_of_colors)

colordf = pd.DataFrame(array_of_colors, index=None, columns=['experiment','color','order'])
print('colordf:',colordf)

colordf = colordf[['experiment','color','order']].set_index('experiment')
print("the new colordf:", colordf)

df = df.join(colordf, on='experiment')

print(df)

df = df.sort_values(by='order')

print(df)

plt.figure(figsize=(12,6))

plt.xlabel('Time [s]')
plt.ylabel('Throughput [Mbps]')

title, legend = chart.extract_label_columns(df)

for t in df.itertuples(index=False):
    style = dict()
    interp = t.interpolationmode if 'interpolationmode' in df else 'sample-hold' if 'enum' in df else None
    if interp:
        if interp == "none":
            style['linestyle'] = ' '
            style['marker'] = '.'
        elif interp == "linear":
            pass # nothing to do
        elif interp == "sample-hold":
            style['drawstyle'] = 'steps-post'
        elif interp == "backward-sample-hold":
            style['drawstyle'] = 'steps-pre'
    print(style)
    style["marker"] = "s"
    style["markersize"] = "3"
    plt.plot(t.vectime, t.vecvalue, label=t.experiment, **style, color=t.color)

plt.title("Throughput over time in various operating modes, 2000-byte packets and 250-byte fragmentation threshold")

plt.legend(ncol=4, markerscale=2)
plt.grid(linestyle='--')

plt.xticks([0,1,2,3,4,5,6,7,8,9,10])

plt.xlim(0,10.2)
plt.ylim(0,7.5)

plt.savefig('throughput.png', transparent=True, dpi=150, bbox_inches='tight')]]>
            </script>
            <dialogPage id="Main" label="Main">
                <![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- page generated from the following spec:
Names {
	chartName,
},
Options {
	Use antialias?,
	Use caching?,
},
Colors {
	backgroundColor
}    
    -->
    
    <!-- Names { -->
    <group text="Names">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- chartName -->
    <label text="Chart name:"/>
    <text x:id="chart_name" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!--  -->

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Background color:"/>
    <ColorChooser x:id="background_color" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]>
            </dialogPage>
            <dialogPage id="Input" label="Input">
                <![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <group text=''>

      <layoutData x:class='GridData' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
      <layout x:class='GridLayout' numColumns='2'/>

      <x:children>
            <label text="Filter expression:">
            	<layoutData x:class="GridData" horizontalAlignment="BEGINNING" verticalAlignment="BEGINNING"/>
            </label>
            <text x:id="filter" x:style="BORDER|WRAP|MULTI" x:id.isFilter="true"> 
                <layoutData x:class="GridData" horizontalAlignment="FILL" verticalAlignment="FILL" grabExcessHorizontalSpace="true" grabExcessVerticalSpace="true"/>
            </text>

            <label text="Chart Title:"/>
            <text x:id="title" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>
      </x:children>

    </group>
  </x:children>
</xswt>]]>
            </dialogPage>
            <property name="filter" value="name(throughput:vector) AND (runattr:experiment(HCFfragblockack) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(DCFfrag) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(DCFnofrag) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(HCFfrag) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;)"/>
            <property name="background_color" value=""/>
            <property name="title" value=""/>
        </chart>
        <chart icon="icons/full/obj/linechart.png" id="91" name="Throughput vs. packet size with a 250-byte fragmentation threshold" template="linechart_mpl" type="MATPLOTLIB">
            <script>
                <![CDATA[# IDE version   OMNeT++ IDE    6.0.0.190710-009aaf6ab8

from omnetpp.scave import results, chart, vectorops as ops
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from tkinter.tix import COLUMN

params = chart.get_properties()

# This expression selects the results (you might be able to logically simplify it)

filter_expression = params["filter"]

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression, include_attrs=True, include_runattrs=True, include_itervars=True)

df["vecvalue"] = df["vecvalue"].apply(np.mean)
df["packetSize"] = df["packetSize"].apply(int)  # iteration variables are strings, but we want to order them as numbers, so convert

print(df)

df = df.pivot(index='packetSize', columns='experiment', values='vecvalue')

# You can perform any transformations on the data here
df /= 1000000

print(df)

plt.figure(figsize=(10,6))

# define the order in which the columns will be plotted
# also assign a color for each column
column_order_color = [
    ('OnlyPacketSizeDCFnofrag',       '#2ca02c'),
    ('OnlyPacketSizeDCFfrag',         '#d62728'),
    ('OnlyPacketSizeHCFfrag',         '#1f77b4'),
    ('OnlyPacketSizeHCFfragblockack', '#ff7f0e')
]

print(df)
# iterate on the above list instead of the dataframe, so we dont
# have to reorder the columns (and still get the desired order and colors)
for c in column_order_color:
    plt.plot(df[c[0]], color=c[1], marker='s', markersize=3)

xmin, xmax = plt.xlim()
plt.xlim(0,xmax)

plt.title('Throughput vs. packet size with a 250-byte fragmentation threshold')
plt.xlabel('Packet size [Byte]')
plt.ylabel('Throughput [Mbps]')

plt.grid(linestyle='--')

plt.xlim(0,2550)
plt.ylim(0,7.6)

plt.xticks(range(0,2500,200))

# Remove 'OnlyPacketSize' from legend labels
ax = plt.gca()
handles, labels = ax.get_legend_handles_labels()
newlabels = []
for i in labels:
    newlabels.append(i.replace('OnlyPacketSize',''))
ax.legend(handles, newlabels, loc=1, markerscale=2)

plt.savefig('onlypacketsize.png', transparent=True, dpi=150, bbox_inches='tight')]]>
            </script>
            <dialogPage id="Main" label="Main">
                <![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- page generated from the following spec:
Names {
	chartName,
},
Options {
	Use antialias?,
	Use caching?,
},
Colors {
	backgroundColor
}    
    -->
    
    <!-- Names { -->
    <group text="Names">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- chartName -->
    <label text="Chart name:"/>
    <text x:id="chart_name" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!--  -->

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Background color:"/>
    <ColorChooser x:id="background_color" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]>
            </dialogPage>
            <dialogPage id="Input" label="Input">
                <![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <group text=''>

      <layoutData x:class='GridData' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
      <layout x:class='GridLayout' numColumns='2'/>

      <x:children>
            <label text="Filter expression:">
            	<layoutData x:class="GridData" horizontalAlignment="BEGINNING" verticalAlignment="BEGINNING"/>
            </label>
            <text x:id="filter" x:style="BORDER|WRAP|MULTI" x:id.isFilter="true"> 
                <layoutData x:class="GridData" horizontalAlignment="FILL" verticalAlignment="FILL" grabExcessHorizontalSpace="true" grabExcessVerticalSpace="true"/>
            </text>

            <label text="Chart Title:"/>
            <text x:id="title" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>
      </x:children>

    </group>
  </x:children>
</xswt>]]>
            </dialogPage>
            <property name="filter" value="module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) AND ((runattr:experiment(OnlyPacketSizeHCFfragblockack) OR runattr:experiment(OnlyPacketSizeDCFnofrag) OR runattr:experiment(OnlyPacketSizeHCFfrag) OR runattr:experiment(OnlyPacketSizeDCFfrag)))"/>
            <property name="background_color" value=""/>
            <property name="title" value=""/>
        </chart>
        <chart icon="icons/full/obj/linechart.png" id="105" name="Throughput vs. packet size, with all frames fragmented to 16 fragments" template="linechart_mpl" type="MATPLOTLIB">
            <script>
                <![CDATA[# IDE version   OMNeT++ IDE    6.0.0.190710-009aaf6ab8

from omnetpp.scave import results, chart, vectorops as ops
import matplotlib.pyplot as plt
import numpy as np

params = chart.get_properties()

# This expression selects the results (you might be able to logically simplify it)

filter_expression = params["filter"]

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression, include_attrs=True, include_runattrs=True, include_itervars=True)

df["vecvalue"] = df["vecvalue"].apply(np.mean)
df["packetSize"] = df["packetSize"].apply(int)  # iteration variables are strings, but we want to order them as numbers, so convert

df = df.pivot(index='packetSize', columns='experiment', values='vecvalue')

# You can perform any transformations on the data here
df /= 1000000

print(df)

plt.figure(figsize=(10,6))

# define the order in which the columns will be plotted
# also assign a color for each column
column_order_color = [
    ('PacketSizeDCFnofrag',       '#2ca02c'),
    ('PacketSizeDCFfrag',         '#d62728'),
    ('PacketSizeHCFfrag',         '#1f77b4'),
    ('PacketSizeHCFfragblockack', '#ff7f0e')
]

print(df)
# iterate on the above list instead of the dataframe, so we dont
# have to reorder the columns (and still get the desired order and colors)
for c in column_order_color:
    plt.plot(df[c[0]], color=c[1], marker='s', markersize=3)

xmin, xmax = plt.xlim()
plt.xlim(0,xmax)

plt.title('Throughput vs. packet size, with all frames fragmented to 16 fragments')
plt.xlabel('Packet size [Byte]')
plt.ylabel('Throughput [Mbps]')

plt.grid(linestyle='--')

plt.xlim(0,6100)
plt.ylim(0,8)

plt.xticks(range(0,6100,500))

# Remove 'PacketSize' from legend labels
ax = plt.gca()
handles, labels = ax.get_legend_handles_labels()
newlabels = []
for i in labels:
    newlabels.append(i.replace('PacketSize',''))
ax.legend(handles, newlabels, loc=1, markerscale=2)

plt.savefig('packetsize.png', transparent=True, dpi=150, bbox_inches='tight')]]>
            </script>
            <dialogPage id="Main" label="Main">
                <![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- page generated from the following spec:
Names {
	chartName,
},
Options {
	Use antialias?,
	Use caching?,
},
Colors {
	backgroundColor
}    
    -->
    
    <!-- Names { -->
    <group text="Names">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- chartName -->
    <label text="Chart name:"/>
    <text x:id="chart_name" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!--  -->

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Background color:"/>
    <ColorChooser x:id="background_color" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]>
            </dialogPage>
            <dialogPage id="Input" label="Input">
                <![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <group text=''>

      <layoutData x:class='GridData' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
      <layout x:class='GridLayout' numColumns='2'/>

      <x:children>
            <label text="Filter expression:">
            	<layoutData x:class="GridData" horizontalAlignment="BEGINNING" verticalAlignment="BEGINNING"/>
            </label>
            <text x:id="filter" x:style="BORDER|WRAP|MULTI" x:id.isFilter="true"> 
                <layoutData x:class="GridData" horizontalAlignment="FILL" verticalAlignment="FILL" grabExcessHorizontalSpace="true" grabExcessVerticalSpace="true"/>
            </text>

            <label text="Chart Title:"/>
            <text x:id="title" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>
      </x:children>

    </group>
  </x:children>
</xswt>]]>
            </dialogPage>
            <property name="filter" value="module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) AND ((runattr:experiment(PacketSizeHCFfragblockack) OR runattr:experiment(PacketSizeDCFnofrag) OR runattr:experiment(PacketSizeHCFfrag) OR runattr:experiment(PacketSizeDCFfrag)))"/>
            <property name="background_color" value=""/>
            <property name="title" value=""/>
        </chart>
        <chart icon="icons/full/obj/linechart.png" id="119" name="Throughput vs. fragmentation threshold, 1000-byte packets" template="linechart_mpl" type="MATPLOTLIB">
            <script>
                <![CDATA[# IDE version   OMNeT++ IDE    6.0.0.190710-009aaf6ab8

from omnetpp.scave import results, chart, vectorops as ops
import matplotlib.pyplot as plt
import numpy as np

params = chart.get_properties()

# This expression selects the results (you might be able to logically simplify it)

filter_expression = params["filter"]

# The data is returned as a Pandas DataFrame
df = results.get_vectors(filter_expression, include_attrs=True, include_runattrs=True, include_itervars=True)

df = ops.perform_vector_ops(df, params["vector_operations"])

# You can perform any transformations on the data here

df['vecvalue'] = df['vecvalue'].apply(np.mean)
df['threshold'] = df['threshold'].apply(int)
df = df.pivot(index='threshold', columns='experiment', values='vecvalue')
df /= 1000000

print(df)

plt.figure(figsize=(10,5))

# define the order in which the columns will be plotted
# also assign a color for each column
column_order_color = [
    ('ThresholdDCFfrag',         '#d62728'),
    ('ThresholdHCFfrag',         '#1f77b4'),
    ('ThresholdHCFfragblockack', '#ff7f0e')
]

print(df)
# iterate on the above list instead of the dataframe, so we dont
# have to reorder the columns (and still get the desired order and colors)
for c in column_order_color:
    plt.plot(df[c[0]], color=c[1], marker='s', markersize=3)

plt.xlim(0,1050)
plt.ylim(0,7)

plt.xticks(range(0,1050,100))

plt.title('Throughput vs. fragmentation threshold, 1000-byte packets')
plt.xlabel('Fragmentation threshold [Byte]')
plt.ylabel('Throughput [Mbps]')

plt.legend()
plt.grid(linestyle='--')

# Remove 'Threshold' from legend labels
ax = plt.gca()
handles, labels = ax.get_legend_handles_labels()
newlabels = []
for i in labels:
    newlabels.append(i.replace('Threshold',''))
ax.legend(handles, newlabels, loc=1, markerscale=2)

plt.savefig('threshold.png', transparent=True, dpi=150, bbox_inches='tight')]]>
            </script>
            <dialogPage id="Main" label="Main">
                <![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- page generated from the following spec:
Names {
	chartName,
},
Options {
	Use antialias?,
	Use caching?,
},
Colors {
	backgroundColor
}    
    -->
    
    <!-- Names { -->
    <group text="Names">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- chartName -->
    <label text="Chart name:"/>
    <text x:id="chart_name" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!--  -->

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Background color:"/>
    <ColorChooser x:id="background_color" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]>
            </dialogPage>
            <dialogPage id="Input" label="Input">
                <![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <group text=''>

      <layoutData x:class='GridData' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
      <layout x:class='GridLayout' numColumns='2'/>

      <x:children>
            <label text="Filter expression:">
            	<layoutData x:class="GridData" horizontalAlignment="BEGINNING" verticalAlignment="BEGINNING"/>
            </label>
            <text x:id="filter" x:style="BORDER|WRAP|MULTI" x:id.isFilter="true"> 
                <layoutData x:class="GridData" horizontalAlignment="FILL" verticalAlignment="FILL" grabExcessHorizontalSpace="true" grabExcessVerticalSpace="true"/>
            </text>

            <label text="Chart Title:"/>
            <text x:id="title" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>
      </x:children>

    </group>
  </x:children>
</xswt>]]>
            </dialogPage>
            <property name="filter" value="name(throughput:vector) AND (runattr:experiment(ThresholdDCFfrag) AND runattr:measurement(&quot;$threshold=200&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfragblockack) AND runattr:measurement(&quot;$threshold=600&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfrag) AND runattr:measurement(&quot;$threshold=800&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfragblockack) AND runattr:measurement(&quot;$threshold=700&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdDCFfrag) AND runattr:measurement(&quot;$threshold=600&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfrag) AND runattr:measurement(&quot;$threshold=400&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfragblockack) AND runattr:measurement(&quot;$threshold=300&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfrag) AND runattr:measurement(&quot;$threshold=500&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdDCFfrag) AND runattr:measurement(&quot;$threshold=300&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdDCFfrag) AND runattr:measurement(&quot;$threshold=500&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfrag) AND runattr:measurement(&quot;$threshold=200&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfragblockack) AND runattr:measurement(&quot;$threshold=100&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdDCFfrag) AND runattr:measurement(&quot;$threshold=800&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfragblockack) AND runattr:measurement(&quot;$threshold=900&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfrag) AND runattr:measurement(&quot;$threshold=600&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfrag) AND runattr:measurement(&quot;$threshold=1000&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdDCFfrag) AND runattr:measurement(&quot;$threshold=900&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdDCFfrag) AND runattr:measurement(&quot;$threshold=400&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfragblockack) AND runattr:measurement(&quot;$threshold=400&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfrag) AND runattr:measurement(&quot;$threshold=100&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfrag) AND runattr:measurement(&quot;$threshold=700&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdDCFfrag) AND runattr:measurement(&quot;$threshold=1000&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfragblockack) AND runattr:measurement(&quot;$threshold=800&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfrag) AND runattr:measurement(&quot;$threshold=300&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdDCFfrag) AND runattr:measurement(&quot;$threshold=100&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdDCFfrag) AND runattr:measurement(&quot;$threshold=700&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfragblockack) AND runattr:measurement(&quot;$threshold=200&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfrag) AND runattr:measurement(&quot;$threshold=900&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfragblockack) AND runattr:measurement(&quot;$threshold=1000&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;runattr:experiment(ThresholdHCFfragblockack) AND runattr:measurement(&quot;$threshold=500&quot;) AND runattr:replication(&quot;#0&quot;) AND module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector) &#10;)"/>
            <property name="background_color" value=""/>
            <property name="title" value=""/>
        </chart>
        <chart icon="icons/full/obj/linechart.png" id="133" name="Throughput vs. SNIR in the case of 2000-byte packet size and 250-byte fragmentation threshold" template="linechart_mpl" type="MATPLOTLIB">
            <script>
                <![CDATA[# IDE version   OMNeT++ IDE    6.0.0.190710-009aaf6ab8

from omnetpp.scave import results, chart
import matplotlib.pyplot as plt
import numpy as np

params = chart.get_properties()

# This expression selects the results

# The filter expression is such that it matches both the snir histograms and the
# throughput vectors
filter_expression = params["filter"]

# The data is returned as a Pandas DataFrame

# Get the minSnir:histogram results
df_snir = results.get_histograms(filter_expression, include_attrs=True, include_itervars=True, include_runattrs=True)
# The mean column of this data frame will be the x coordinate
df_snir = df_snir.pivot(index='txPower', columns='experiment', values='mean')
print("SNIR:")
print(df_snir)

# Get the throughput vectors
df_tp = results.get_vectors(filter_expression, include_attrs=True, include_runattrs=True, include_itervars=True)
# Apply mean to vector values to reduce each vector to a single number
# and add it to a new column (mean)
df_tp['mean'] = df_tp['vecvalue'].apply(np.mean)
# The mean column of this data frame will be the y coordinate
df_tp = df_tp.pivot(index='txPower', columns='experiment', values='mean')
print("Throughput:")
print(df_tp)

plt.figure(figsize=(11,6))

# define the order in which the columns will be plotted
# also assign a color for each column
column_order_color = [
    ('TxPowerDCFnofrag',       '#2ca02c'),
    ('TxPowerDCFfrag',         '#d62728'),
    ('TxPowerHCFfrag',         '#1f77b4'),
    ('TxPowerHCFfragblockack', '#ff7f0e')
]

print(df_tp)
# iterate on the above list instead of the dataframe, so we dont
# have to reorder the columns (and still get the desired order and colors)
# For each column (experiment) we plot a line, taking the x coordinates
# from df_snir, the y coordinates from df_tp
for c in column_order_color:    # Iterate on the column names (experiments) which is the same in both df'
    plt.plot(df_snir[c[0]], df_tp[c[0]] / 1e6, color=c[1], marker='s', markersize=3)    # Also convert to Mbps

plt.xlim(14,28)
plt.ylim(0,18)

plt.xticks(range(14,29,1))
plt.yticks(range(0,20,5))

plt.title('Throughput vs. SNIR in the case of 2000-byte packet size and 250-byte fragmentation threshold')
plt.xlabel('SNIR')
plt.ylabel('Throughput [Mbps]')


plt.legend()
plt.grid(linestyle='--')

# Remove 'TxPower' from legend labels
ax = plt.gca()
handles, labels = ax.get_legend_handles_labels()
newlabels = []
for i in labels:
    newlabels.append(i.replace('TxPower',''))
ax.legend(handles, newlabels, loc=1, ncol=4, markerscale=2)

plt.savefig('snir.png', transparent=True, dpi=150, bbox_inches='tight')]]>
            </script>
            <dialogPage id="Main" label="Main">
                <![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<xswt xmlns:x="http://sweet_swt.sf.net/xswt">

  <import xmlns="http://sweet_swt.sf.net/xswt">
    <package name="java.lang"/>
    <package name="org.eclipse.swt.widgets" />
    <package name="org.eclipse.swt.graphics" />
    <package name="org.eclipse.swt.layout" />
    <package name="org.eclipse.swt.custom" />
    <package name="org.omnetpp.common.wizard.support" />
    <package name="org.omnetpp.ned.editor.wizards.support" />
    <package name="org.omnetpp.cdt.wizard.support" />
  </import>
  <layout x:class="GridLayout" numColumns="2"/>

  <x:children>

    <!-- page generated from the following spec:
Names {
	chartName,
},
Options {
	Use antialias?,
	Use caching?,
},
Colors {
	backgroundColor
}    
    -->
    
    <!-- Names { -->
    <group text="Names">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- chartName -->
    <label text="Chart name:"/>
    <text x:id="chart_name" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </text>

    <!--  -->

    <!-- } -->
      </x:children>
    </group>

    <!-- Colors { -->
    <group text="Colors">
      <layoutData x:class="GridData" horizontalSpan="2" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
      <layout x:class="GridLayout" numColumns="2"/>
      <x:children>

    <!-- backgroundColor -->
    <label text="Background color:"/>
    <ColorChooser x:id="background_color" x:style="BORDER">
      <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
    </ColorChooser>

    <!-- } -->
      </x:children>
    </group>

  </x:children>
</xswt>
]]>
            </dialogPage>
            <dialogPage id="Input" label="Input">
                <![CDATA[<?xml version='1.0' encoding='UTF-8'?>
<xswt xmlns:x='http://sweet_swt.sf.net/xswt'>
  <import xmlns='http://sweet_swt.sf.net/xswt'>
    <package name='java.lang'/>
    <package name='org.eclipse.swt.widgets' />
    <package name='org.eclipse.swt.graphics' />
    <package name='org.eclipse.swt.layout' />
    <package name='org.eclipse.swt.custom' />
  </import>
  <layout x:class='GridLayout' numColumns='1'/>
  <x:children>
    <group text=''>

      <layoutData x:class='GridData' horizontalAlignment='FILL' verticalAlignment='FILL' grabExcessHorizontalSpace='true' grabExcessVerticalSpace='true'/>
      <layout x:class='GridLayout' numColumns='2'/>

      <x:children>
            <label text="Filter expression:">
            	<layoutData x:class="GridData" horizontalAlignment="BEGINNING" verticalAlignment="BEGINNING"/>
            </label>
            <text x:id="filter" x:style="BORDER|WRAP|MULTI" x:id.isFilter="true"> 
                <layoutData x:class="GridData" horizontalAlignment="FILL" verticalAlignment="FILL" grabExcessHorizontalSpace="true" grabExcessVerticalSpace="true"/>
            </text>

            <label text="Chart Title:"/>
            <text x:id="title" x:style="BORDER">
          <layoutData x:class="GridData" horizontalAlignment="FILL" grabExcessHorizontalSpace="true"/>
        </text>
      </x:children>

    </group>
  </x:children>
</xswt>]]>
            </dialogPage>
            <property name="filter" value="(&#10; (module(&quot;FragmentationShowcase.wifiHost2.app[0]&quot;) AND name(throughput:vector))&#10;   OR&#10; (module(&quot;FragmentationShowcase.wifiHost2.wlan[0].radio&quot;) AND name(minSnir:histogram))&#10;) &#10;&#10;AND&#10;((runattr:experiment(TxPowerDCFnofrag)&#10;  OR runattr:experiment(TxPowerDCFfrag)&#10;  OR runattr:experiment(TxPowerHCFfrag)&#10;  OR runattr:experiment(TxPowerHCFfragblockack)))"/>
            <property name="background_color" value=""/>
            <property name="title" value=""/>
        </chart>
    </charts>
</analysis>
